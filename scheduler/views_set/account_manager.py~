from django.shortcuts import render
from datetime import datetime , timedelta
from ..models import *
import string
import random
from dateutil import parser
from django.core.urlresolvers import reverse
from django.utils import timezone
import json
from django.contrib.auth.hashers import make_password

def accountManager_userInfo(request):
    if 'member_id' in request.session:
        try:
            row = SurveyUser.objects.get(id=request.session['member_id'])

            return render(request, 'account_management.html', {'email': row.email,
                                                               'signInDate': row.sign_in_date,
                                                               'hideLoginPanel': True,
                                                               'swap_LoginPanel_to_accountmanager_menu' : True,
                                                               'website_type':'userInfo',
                                                               })

        except:
            return render(request, "some_error_panel.html",
                          {'errorDescription': "Wystąpił błąd przy próbie wczytania danych konta."})







def accountManager_changeUserdata(request):
	if 'member_id' in request.session:
		if "member_name" in request.POST:
			try:
				user = SurveyUser.objects.get(id=request.session['member_id'])
				user.name=request.POST['member_name']
				user.surname=request.POST['member_surname']
				user.save()
				request.session['member_name'] = user.name
				request.session['member_surname'] = user.surname
				return render(request, 'account_management.html', {
				'website_type':'changeUserdata',
				'success_token':'Dane zostały zmienione pomyślnie.',
				'hideLoginPanel': True,})
	
			except:
				
				return render(request, 'account_management.html', {
					'website_type':'changeUserdata',
					'error_token':'wystąpił błąd podczas zmieniania danych.',
					'hideLoginPanel': True,})
					
		return render(request, 'account_management.html', {
					'website_type':'changeUserdata',
					'hideLoginPanel': True,})


def accountManager_changeUserpassword(request):
	if 'member_id' in request.session:
		if 'oldpass' in request.POST:
			user = SurveyUser.objects.get(id=request.session['member_id'])
			oldpass=make_password(password=request.POST['oldpass'],salt=None,hasher='unsalted_md5')
			if oldpass != user.hash_of_password :
				return render(request, 'account_management.html', {
					'website_type':'changeUserpassword',
					'hideLoginPanel': True,
					'error_token':'Podane niewłaściwe hasło'})
			if request.POST['pass'] != request.POST['rpass']:
				return render(request, 'account_management.html', {
					'website_type':'changeUserpassword',
					'hideLoginPanel': True,
					'error_token':'Podane nowe hasła się nie zgadzają'})
			user.hash_of_password=make_password(password=request.POST['pass'],salt=None,hasher='unsalted_md5')
			user.save()
			return render(request, 'account_management.html', {
					'website_type':'changeUserpassword',
					'hideLoginPanel': True,
					'success_token':'Hasło zostało zmienione pomyślnie'})
		else:
			return render(request, 'account_management.html', {
					'website_type':'changeUserpassword',
					'hideLoginPanel': True,})






def accountManager_userSurveys(request):
	if 'member_id' in request.session:
		row = SurveyUser.objects.get(id=request.session['member_id'])
		mySurveys = Survey.objects.filter(user=row)
		listOfSurveys = []
		for survey in mySurveys:
			listOfSurveys.append((survey.title, survey.adminID, survey.userID))
	
	return render(request, 'account_management.html', 
	{'listOfSurveys': listOfSurveys, 
	 'website_type' :'userSurveys',
	 'hideLoginPanel': True,})




def accountManager_userActivity(request):
	if 'member_id' in request.session:
		try:
			row = SurveyUser.objects.get(id=request.session['member_id'])
			mySurveys = Survey.objects.filter(user=row)
			listOfSurveys = []
			for survey in mySurveys:
				listOfSurveys.append((survey.title, survey.adminID, survey.userID))
			numberOfSurveys = len(mySurveys)
			recently = timezone.now() - timedelta(days=30)
			recentSurveys = Survey.objects.filter(user=row).exclude(creation_date__gte=timezone.now()).filter(
			creation_date__gte=recently)
			numberOfRecentS = len(recentSurveys)
			daySinceRegister = timezone.now() - row.sign_in_date
			daySinceRegister = int(daySinceRegister.total_seconds() / 3600 / 24)
			try:
				mostRecentSurvey = Survey.objects.filter(user=row).order_by('-creation_date')[:1]
				mostRecentSurvey = mostRecentSurvey[0].creation_date
			except:
				mostRecentSurvey = "Nie dodałeś jeszcze żadnej ankiety!"
			########dane do wykresu #####
			daynum = []
			daynum.append(['Dzien', 'Ilosc utworzonych ankiet'])
			for i in range(1, 11):
				recently = timezone.now() - timedelta(days=i)
				recentSurveys = Survey.objects.filter(user=row).exclude(creation_date__gte=timezone.now()).filter(
				creation_date__gte=recently)
				daynum.append([str(i), len(recentSurveys)])
			json_list = json.dumps(daynum)
			dateTimes = []
			id1 = 0
			id2 = 1
			dateTimes.append((id1, id2, None, None))
			return render(request, 'account_management.html', {
                                                               'listOfSurveys': listOfSurveys,
                                                               'hideLoginPanel': True,
                                                               'daySinceRegister': daySinceRegister,
                                                               'mostRecentSurvey': mostRecentSurvey,
                                                               'numberOfSurveys': numberOfSurveys,
                                                               'numberOfRecentS': numberOfRecentS,
                                                               'plotData': json_list,
                                                               'dateTimes': dateTimes,
                                                               'website_type':'userActivity'
                                                               })

		except:
			return render(request, "some_error_panel.html",
                          {'errorDescription': "Wystąpił błąd przy próbie wczytania danych konta."})




def removeElement(request):
    try:
        row=Survey.objects.get(adminID=request.GET['adminID'])
        user=SurveyUser.objects.get(id=request.session['member_id'])

        if user==row.user:
            row.delete()
    except:
        pass
    return render(request,"redirector.html",{"newUrl" : "./am_userSurveys"})
