from django.shortcuts import render
from datetime import datetime , timedelta
from ..models import *
import string
import random
from dateutil import parser
from django.core.urlresolvers import reverse
from django.utils import timezone
import json

def accountManager(request):
    if 'member_id' in request.session:
        try:
            row = SurveyUser.objects.get(id=request.session['member_id'])

            mySurveys = Survey.objects.filter(user=row)

            listOfSurveys = []
            for survey in mySurveys:
                listOfSurveys.append((survey.title, survey.adminID, survey.userID))
            numberOfSurveys = len(mySurveys)
            recently = timezone.now() - timedelta(days=30)
            recentSurveys = Survey.objects.filter(user=row).exclude(creation_date__gte=timezone.now()).filter(
                creation_date__gte=recently)
            numberOfRecentS = len(recentSurveys)

            daySinceRegister = timezone.now() - row.sign_in_date
            daySinceRegister = int(daySinceRegister.total_seconds() / 3600 / 24)
            try:
                mostRecentSurvey = Survey.objects.filter(user=row).order_by('-creation_date')[:1]
                mostRecentSurvey = mostRecentSurvey[0].creation_date
            except:
                mostRecentSurvey = "Nie dodałeś jeszcze żadnej ankiety!"

            ########dane do wykresu #####
            daynum = []
            daynum.append(['Dzien', 'Ilosc utworzonych ankiet'])
            for i in range(1, 11):
                recently = timezone.now() - timedelta(days=i)
                recentSurveys = Survey.objects.filter(user=row).exclude(creation_date__gte=timezone.now()).filter(
                    creation_date__gte=recently)
                daynum.append([str(i), len(recentSurveys)])
            json_list = json.dumps(daynum)
            dateTimes = []
            id1 = 0
            id2 = 1
            dateTimes.append((id1, id2, None, None))
            return render(request, 'account_management.html', {'email': row.email,
                                                               'signInDate': row.sign_in_date,
                                                               'listOfSurveys': listOfSurveys,
                                                               'hideLoginPanel': True,
                                                               'daySinceRegister': daySinceRegister,
                                                               'mostRecentSurvey': mostRecentSurvey,
                                                               'numberOfSurveys': numberOfSurveys,
                                                               'numberOfRecentS': numberOfRecentS,
                                                               'plotData': json_list,
                                                               'dateTimes': dateTimes,
                                                               })

        except:
            return render(request, "some_error_panel.html",
                          {'errorDescription': "Wystąpił błąd przy próbie wczytania danych konta."})


def removeElement(request):
    try:
        row=Survey.objects.get(adminID=request.GET['adminID'])
        user=SurveyUser.objects.get(id=request.session['member_id'])

        if user==row.user:
            row.delete()
    except:
        pass
    return render(request,"redirector.html",{"newUrl" : "./accountManager"})